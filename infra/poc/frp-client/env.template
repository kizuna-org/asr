# ---
# description: 
# globs: 
# alwaysApply: true
# ---
# ## ドキュメント
#
# `/docs/*.md`は絶対に読んでください。
# また、`/docs/dev/`は実装経緯が書いてあるので必要に応じて読んでください。
# **プロンプトの更新履歴を記録する**: 何かを実装する際は、必ず`docs/dev`ディレクトリに適切なMarkdownファイルを作成し、更新内容を保存します。ファイル名は`YYYY-MM-DD_update_summary.md`のようにしてください。
# なお、今日の日付は`date +%Y-%m-%d`で取得できます。**絶対に今日の日付を使用してください**
#
# ## Git コミット
#
# **作業完了後のコミット**: タスクが完了した際は、必ず適切なコミットメッセージと共にGitコミットを実行してください。
# コミットメッセージは英語にしてください。
#
# ### コミットの実行手順
#
# 1. 変更されたファイルをステージング: `git add .`
# 2. 適切なコミットメッセージでコミット: `git commit -m "適切なコミットメッセージ"`
#
# ### コミットメッセージの例
#
# ```bash
# git commit -m "feat: add new feature"
# git commit -m "fix: fix bug"
# git commit -m "docs: update documentation"
# git commit -m "refactor: refactor code"
# git commit -m "chore: update configuration files"
# ```
#
# ## Docker
#
# `docker compose up`の実行時は`-d`を必ずつけてください
#
# ### poc環境
#
# 起動時は`docker compose down && rm jenkins_home  && docker compose --progress plain up -d`です。
# ちゃんと`rm jenkins_home`をしないと再起動後も過去のデータが残ったままになります
# 起動確認は数秒待った後`docker compose ps`や`docker compose logs jenkins`でできます

# Jenkins 設定
JENKINS_ADMIN_USER=admin
JENKINS_ADMIN_PASSWORD=jenkins_admin_password

# Gitea 設定
GITEA_USER=poc_user
GITEA_PASS=poc_password

# FRP 設定
FRP_TOKEN=jenkins_frp_secret_token
FRP_DASHBOARD_USER=admin
FRP_DASHBOARD_PASSWORD=frp_admin_password

# FRP サーバー接続設定
FRP_SERVER_HOST=frps.shiron.dev

# Docker User 設定
UID=1000
GID=1000
